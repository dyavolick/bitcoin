#!/usr/bin/env python3
# Copyright (c) 2013-2017 The Bitcoinold Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
#
# Generate seeds.txt from Pieter's DNS seeder
#

NSEEDS=512

MAX_SEEDS_PER_ASN=2

MIN_BLOCKS = 337600

# These are hosts that have been observed to be behaving strangely (e.g.
# aggressively connecting to every node).
SUSPICIOUS_HOSTS = {
    "23.92.36.1",
"23.92.36.2",
"23.92.36.3",
"23.92.36.4",
"23.92.36.5",
"23.92.36.6",
"23.92.36.7",
"23.92.36.8",
"23.92.36.9",
"23.92.36.10",
"23.92.36.11",
"23.92.36.12",
"23.92.36.13",
"23.92.36.14",
"23.92.36.15",
"23.92.36.16",
"23.92.36.17",
"23.92.36.18",
"23.92.36.19",
"23.92.36.20",
"23.92.36.21",
"23.92.36.22",
"23.92.36.23",
"23.92.36.24",
"23.92.36.25",
"23.92.36.26",
"23.92.36.27",
"23.92.36.28",
"23.92.36.29",
"23.92.36.30",
"23.92.36.31",
"23.92.36.32",
"23.92.36.33",
"23.92.36.34",
"23.92.36.35",
"23.92.36.36",
"23.92.36.37",
"23.92.36.38",
"23.92.36.39",
"23.92.36.40",
"23.92.36.41",
"23.92.36.42",
"23.92.36.43",
"23.92.36.44",
"23.92.36.45",
"23.92.36.46",
"23.92.36.47",
"23.92.36.48",
"23.92.36.49",
"23.92.36.50",
"23.92.36.51",
"23.92.36.52",
"23.92.36.53",
"23.92.36.54",
"23.92.36.55",
"23.92.36.56",
"23.92.36.57",
"23.92.36.58",
"23.92.36.59",
"23.92.36.60",
"23.92.36.61",
"23.92.36.62",
"23.92.36.63",
"23.92.36.64",
"23.92.36.65",
"23.92.36.66",
"23.92.36.67",
"23.92.36.68",
"23.92.36.69",
"23.92.36.70",
"23.92.36.71",
"23.92.36.72",
"23.92.36.73",
"23.92.36.74",
"23.92.36.75",
"23.92.36.76",
"23.92.36.77",
"23.92.36.78",
"23.92.36.79",
"23.92.36.80",
"23.92.36.81",
"23.92.36.82",
"23.92.36.83",
"23.92.36.84",
"23.92.36.85",
"23.92.36.86",
"23.92.36.87",
"23.92.36.88",
"23.92.36.89",
"23.92.36.90",
"23.92.36.91",
"23.92.36.92",
"23.92.36.93",
"23.92.36.94",
"23.92.36.95",
"23.92.36.96",
"23.92.36.97",
"23.92.36.98",
"23.92.36.99",
"23.92.36.100",
"23.92.36.101",
"23.92.36.102",
"23.92.36.103",
"23.92.36.104",
"23.92.36.105",
"23.92.36.106",
"23.92.36.107",
"23.92.36.108",
"23.92.36.109",
"23.92.36.110",
"23.92.36.111",
"23.92.36.112",
"23.92.36.113",
"23.92.36.114",
"23.92.36.115",
"23.92.36.116",
"23.92.36.117",
"23.92.36.118",
"23.92.36.119",
"23.92.36.120",
"23.92.36.121",
"23.92.36.122",
"23.92.36.123",
"23.92.36.124",
"23.92.36.125",
"23.92.36.126",
"23.92.36.127",
"23.92.36.128",
"23.92.36.129",
"23.92.36.130",
"23.92.36.131",
"23.92.36.132",
"23.92.36.133",
"23.92.36.134",
"23.92.36.135",
"23.92.36.136",
"23.92.36.137",
"23.92.36.138",
"23.92.36.139",
"23.92.36.140",
"23.92.36.141",
"23.92.36.142",
"23.92.36.143",
"23.92.36.144",
"23.92.36.145",
"23.92.36.146",
"23.92.36.147",
"23.92.36.148",
"23.92.36.149",
"23.92.36.150",
"23.92.36.151",
"23.92.36.152",
"23.92.36.153",
"23.92.36.154",
"23.92.36.155",
"23.92.36.156",
"23.92.36.157",
"23.92.36.158",
"23.92.36.159",
"23.92.36.160",
"23.92.36.161",
"23.92.36.162",
"23.92.36.163",
"23.92.36.164",
"23.92.36.165",
"23.92.36.166",
"23.92.36.167",
"23.92.36.168",
"23.92.36.169",
"23.92.36.170",
"23.92.36.171",
"23.92.36.172",
"23.92.36.173",
"23.92.36.174",
"23.92.36.175",
"23.92.36.176",
"23.92.36.177",
"23.92.36.178",
"23.92.36.179",
"23.92.36.180",
"23.92.36.181",
"23.92.36.182",
"23.92.36.183",
"23.92.36.184",
"23.92.36.185",
"23.92.36.186",
"23.92.36.187",
"23.92.36.188",
"23.92.36.189",
"23.92.36.190",
"23.92.36.191",
"23.92.36.192",
"23.92.36.193",
"23.92.36.194",
"23.92.36.195",
"23.92.36.196",
"23.92.36.197",
"23.92.36.198",
"23.92.36.199",
"23.92.36.200",
"23.92.36.201",
"23.92.36.202",
"23.92.36.203",
"23.92.36.204",
"23.92.36.205",
"23.92.36.206",
"23.92.36.207",
"23.92.36.208",
"23.92.36.209",
"23.92.36.210",
"23.92.36.211",
"23.92.36.212",
"23.92.36.213",
"23.92.36.214",
"23.92.36.215",
"23.92.36.216",
"23.92.36.217",
"23.92.36.218",
"23.92.36.219",
"23.92.36.220",
"23.92.36.221",
"23.92.36.222",
"23.92.36.223",
"23.92.36.224",
"23.92.36.225",
"23.92.36.226",
"23.92.36.227",
"23.92.36.228",
"23.92.36.229",
"23.92.36.230",
"23.92.36.231",
"23.92.36.232",
"23.92.36.233",
"23.92.36.234",
"23.92.36.235",
"23.92.36.236",
"23.92.36.237",
"23.92.36.238",
"23.92.36.239",
"23.92.36.240",
"23.92.36.241",
"23.92.36.242",
"23.92.36.243",
"23.92.36.244",
"23.92.36.245",
"23.92.36.246",
"23.92.36.247",
"23.92.36.248",
"23.92.36.249",
"23.92.36.250",
"23.92.36.251",
"23.92.36.252",
"23.92.36.253",
"23.92.36.254",
"162.218.65.0",
"162.218.65.1",
"162.218.65.2",
"162.218.65.3",
"162.218.65.4",
"162.218.65.5",
"162.218.65.6",
"162.218.65.7",
"162.218.65.8",
"162.218.65.9",
"162.218.65.10",
"162.218.65.11",
"162.218.65.12",
"162.218.65.13",
"162.218.65.14",
"162.218.65.15",
"162.218.65.16",
"162.218.65.17",
"162.218.65.18",
"162.218.65.19",
"162.218.65.20",
"162.218.65.21",
"162.218.65.22",
"162.218.65.23",
"162.218.65.24",
"162.218.65.25",
"162.218.65.26",
"162.218.65.27",
"162.218.65.28",
"162.218.65.29",
"162.218.65.30",
"162.218.65.31",
"162.218.65.32",
"162.218.65.33",
"162.218.65.34",
"162.218.65.35",
"162.218.65.36",
"162.218.65.37",
"162.218.65.38",
"162.218.65.39",
"162.218.65.40",
"162.218.65.41",
"162.218.65.42",
"162.218.65.43",
"162.218.65.44",
"162.218.65.45",
"162.218.65.46",
"162.218.65.47",
"162.218.65.48",
"162.218.65.49",
"162.218.65.50",
"162.218.65.51",
"162.218.65.52",
"162.218.65.53",
"162.218.65.54",
"162.218.65.55",
"162.218.65.56",
"162.218.65.57",
"162.218.65.58",
"162.218.65.59",
"162.218.65.60",
"162.218.65.61",
"162.218.65.62",
"162.218.65.63",
"162.218.65.64",
"162.218.65.65",
"162.218.65.66",
"162.218.65.67",
"162.218.65.68",
"162.218.65.69",
"162.218.65.70",
"162.218.65.71",
"162.218.65.72",
"162.218.65.73",
"162.218.65.74",
"162.218.65.75",
"162.218.65.76",
"162.218.65.77",
"162.218.65.78",
"162.218.65.79",
"162.218.65.80",
"162.218.65.81",
"162.218.65.82",
"162.218.65.83",
"162.218.65.84",
"162.218.65.85",
"162.218.65.86",
"162.218.65.87",
"162.218.65.88",
"162.218.65.89",
"162.218.65.90",
"162.218.65.91",
"162.218.65.92",
"162.218.65.93",
"162.218.65.94",
"162.218.65.95",
"162.218.65.96",
"162.218.65.97",
"162.218.65.98",
"162.218.65.99",
"162.218.65.100",
"162.218.65.101",
"162.218.65.102",
"162.218.65.103",
"162.218.65.104",
"162.218.65.105",
"162.218.65.106",
"162.218.65.107",
"162.218.65.108",
"162.218.65.109",
"162.218.65.110",
"162.218.65.111",
"162.218.65.112",
"162.218.65.113",
"162.218.65.114",
"162.218.65.115",
"162.218.65.116",
"162.218.65.117",
"162.218.65.118",
"162.218.65.119",
"162.218.65.120",
"162.218.65.121",
"162.218.65.122",
"162.218.65.123",
"162.218.65.124",
"162.218.65.125",
"162.218.65.126",
"162.218.65.127",
"162.218.65.128",
"162.218.65.129",
"162.218.65.130",
"162.218.65.131",
"162.218.65.132",
"162.218.65.133",
"162.218.65.134",
"162.218.65.135",
"162.218.65.136",
"162.218.65.137",
"162.218.65.138",
"162.218.65.139",
"162.218.65.140",
"162.218.65.141",
"162.218.65.142",
"162.218.65.143",
"162.218.65.144",
"162.218.65.145",
"162.218.65.146",
"162.218.65.147",
"162.218.65.148",
"162.218.65.149",
"162.218.65.150",
"162.218.65.151",
"162.218.65.152",
"162.218.65.153",
"162.218.65.154",
"162.218.65.155",
"162.218.65.156",
"162.218.65.157",
"162.218.65.158",
"162.218.65.159",
"162.218.65.160",
"162.218.65.161",
"162.218.65.162",
"162.218.65.163",
"162.218.65.164",
"162.218.65.165",
"162.218.65.166",
"162.218.65.167",
"162.218.65.168",
"162.218.65.169",
"162.218.65.170",
"162.218.65.171",
"162.218.65.172",
"162.218.65.173",
"162.218.65.174",
"162.218.65.175",
"162.218.65.176",
"162.218.65.177",
"162.218.65.178",
"162.218.65.179",
"162.218.65.180",
"162.218.65.181",
"162.218.65.182",
"162.218.65.183",
"162.218.65.184",
"162.218.65.185",
"162.218.65.186",
"162.218.65.187",
"162.218.65.188",
"162.218.65.189",
"162.218.65.190",
"162.218.65.191",
"162.218.65.192",
"162.218.65.193",
"162.218.65.194",
"162.218.65.195",
"162.218.65.196",
"162.218.65.197",
"162.218.65.198",
"162.218.65.199",
"162.218.65.200",
"162.218.65.201",
"162.218.65.202",
"162.218.65.203",
"162.218.65.204",
"162.218.65.205",
"162.218.65.206",
"162.218.65.207",
"162.218.65.208",
"162.218.65.209",
"162.218.65.210",
"162.218.65.211",
"162.218.65.212",
"162.218.65.213",
"162.218.65.214",
"162.218.65.215",
"162.218.65.216",
"162.218.65.217",
"162.218.65.218",
"162.218.65.219",
"162.218.65.220",
"162.218.65.221",
"162.218.65.222",
"162.218.65.223",
"162.218.65.224",
"162.218.65.225",
"162.218.65.226",
"162.218.65.227",
"162.218.65.228",
"162.218.65.229",
"162.218.65.230",
"162.218.65.231",
"162.218.65.232",
"162.218.65.233",
"162.218.65.234",
"162.218.65.235",
"162.218.65.236",
"162.218.65.237",
"162.218.65.238",
"162.218.65.239",
"162.218.65.240",
"162.218.65.241",
"162.218.65.242",
"162.218.65.243",
"162.218.65.244",
"162.218.65.245",
"162.218.65.246",
"162.218.65.247",
"162.218.65.248",
"162.218.65.249",
"162.218.65.250",
"162.218.65.251",
"162.218.65.252",
"162.218.65.253",
"162.218.65.254"
}

import re
import sys
import dns.resolver
import collections

PATTERN_IPV4 = re.compile(r"^((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})):(\d+)$")
PATTERN_IPV6 = re.compile(r"^\[([0-9a-z:]+)\]:(\d+)$")
PATTERN_ONION = re.compile(r"^([abcdefghijklmnopqrstuvwxyz234567]{16}\.onion):(\d+)$")
PATTERN_AGENT = re.compile(r"^(/Satoshi:0.12.(0|1|99)/|/Satoshi:0.13.(0|1|2|99)/)$")

def parseline(line):
    sline = line.split()
    if len(sline) < 11:
       return None
    m = PATTERN_IPV4.match(sline[0])
    sortkey = None
    ip = None
    if m is None:
        m = PATTERN_IPV6.match(sline[0])
        if m is None:
            m = PATTERN_ONION.match(sline[0])
            if m is None:
                return None
            else:
                net = 'onion'
                ipstr = sortkey = m.group(1)
                port = int(m.group(2))
        else:
            net = 'ipv6'
            if m.group(1) in ['::']: # Not interested in localhost
                return None
            ipstr = m.group(1)
            sortkey = ipstr # XXX parse IPv6 into number, could use name_to_ipv6 from generate-seeds
            port = int(m.group(2))
    else:
        # Do IPv4 sanity check
        ip = 0
        for i in range(0,4):
            if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:
                return None
            ip = ip + (int(m.group(i+2)) << (8*(3-i)))
        if ip == 0:
            return None
        net = 'ipv4'
        sortkey = ip
        ipstr = m.group(1)
        port = int(m.group(6))
    # Skip bad results.
    if sline[1] == 0:
        return None
    # Extract uptime %.
    uptime30 = float(sline[7][:-1])
    # Extract Unix timestamp of last success.
    lastsuccess = int(sline[2])
    # Extract protocol version.
    version = int(sline[10])
    # Extract user agent.
    agent = sline[11][1:-1]
    # Extract service flags.
    service = int(sline[9], 16)
    # Extract blocks.
    blocks = int(sline[8])
    # Construct result.
    return {
        'net': net,
        'ip': ipstr,
        'port': port,
        'ipnum': ip,
        'uptime': uptime30,
        'lastsuccess': lastsuccess,
        'version': version,
        'agent': agent,
        'service': service,
        'blocks': blocks,
        'sortkey': sortkey,
    }

def filtermultiport(ips):
    '''Filter out hosts with more nodes per IP'''
    hist = collections.defaultdict(list)
    for ip in ips:
        hist[ip['sortkey']].append(ip)
    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]

# Based on Greg Maxwell's seed_filter.py
def filterbyasn(ips, max_per_asn, max_total):
    # Sift out ips by type
    ips_ipv4 = [ip for ip in ips if ip['net'] == 'ipv4']
    ips_ipv6 = [ip for ip in ips if ip['net'] == 'ipv6']
    ips_onion = [ip for ip in ips if ip['net'] == 'onion']

    # Filter IPv4 by ASN
    result = []
    asn_count = {}
    for ip in ips_ipv4:
        if len(result) == max_total:
            break
        try:
            asn = int([x.to_text() for x in dns.resolver.query('.'.join(reversed(ip['ip'].split('.'))) + '.origin.asn.cymru.com', 'TXT').response.answer][0].split('\"')[1].split(' ')[0])
            if asn not in asn_count:
                asn_count[asn] = 0
            if asn_count[asn] == max_per_asn:
                continue
            asn_count[asn] += 1
            result.append(ip)
        except:
            sys.stderr.write('ERR: Could not resolve ASN for "' + ip['ip'] + '"\n')

    # TODO: filter IPv6 by ASN

    # Add back non-IPv4
    result.extend(ips_ipv6)
    result.extend(ips_onion)
    return result

def main():
    lines = sys.stdin.readlines()
    ips = [parseline(line) for line in lines]

    # Skip entries with valid address.
    ips = [ip for ip in ips if ip is not None]
    # Skip entries from suspicious hosts.
    ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]
    # Enforce minimal number of blocks.
    ips = [ip for ip in ips if ip['blocks'] >= MIN_BLOCKS]
    # Require service bit 1.
    ips = [ip for ip in ips if (ip['service'] & 1) == 1]
    # Require at least 50% 30-day uptime.
    ips = [ip for ip in ips if ip['uptime'] > 50]
    # Require a known and recent user agent.
    ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]
    # Sort by availability (and use last success as tie breaker)
    ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)
    # Filter out hosts with multiple bitcoinold ports, these are likely abusive
    ips = filtermultiport(ips)
    # Look up ASNs and limit results, both per ASN and globally.
    ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)
    # Sort the results by IP address (for deterministic output).
    ips.sort(key=lambda x: (x['net'], x['sortkey']))

    for ip in ips:
        if ip['net'] == 'ipv6':
            print('[%s]:%i' % (ip['ip'], ip['port']))
        else:
            print('%s:%i' % (ip['ip'], ip['port']))

if __name__ == '__main__':
    main()
